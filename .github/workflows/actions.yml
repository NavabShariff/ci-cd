name: salary-api-build-pipeline

on: 
  push: 
    branches: ['main']


# on:
#   push:
#     branches:
#       - dev
#       - 'feature/*'
#       - 'release/*'
#       - main
#   pull_request:
#     branches:
#       - main


permissions:
  id-token: write
  contents: read  


jobs:

  build:
    runs-on: ubuntu-latest
    container:
      image: maven:3.9-eclipse-temurin-17
      options: --user root
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: .

      - name: Build the Source Code
        run: |
          mvn clean package -DskipTests

      - name: Upload Source Code
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: .


  bug-analysis:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: maven:3.9-eclipse-temurin-17
      options: --user root
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: source-code
        path: .

    - name: Bug Analysis
      run: mvn com.github.spotbugs:spotbugs-maven-plugin:4.7.3.0:spotbugs
  
    - name: check files
      run: | 
       ls -l target/

    - name: Upload Bug report
      uses: actions/upload-artifact@v4
      with:
        name: bug-report
        path: target/*.xml

  sast:
    runs-on: ubuntu-latest
    needs: [build, bug-analysis]
    container:
      image: sonarsource/sonar-scanner-cli:latest
      options: --user root
    steps:
    - name: Download source code
      uses: actions/download-artifact@v4
      with:
        name: source-code
        path: .
    
    - name: Download Bug report
      uses: actions/download-artifact@v4
      with:
        name: bug-report
        path: target

    - name: Check files
      run: |
        ls -l target/

    - name: Scanning of compile code and send scanning report along with codecoverage report to SonarQube server
      run: |
        sonar-scanner \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.projectName=${{ github.event.repository.name }} \
          -Dsonar.projectKey=${{ github.event.repository.name }} \
          -Dsonar.coverage.jacoco.xmlReportPaths=jacoco.xml \
          -Dsonar.dependencyCheck.reportPath=dependency-check-report.xml \
          -Dsonar.sources=src/main/java \
          -Dsonar.tests=src/test/java \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.findbugs.reportpaths=target/spotbugsXml.xml \
          -Dsonar.qualitygate.wait=true
        
  # docker-build-push:
  #   runs-on: ubuntu-latest
  #   env: 
  #     ECR_REPO: 'salary-api'
  #     AWS_REGION: 'ap-south-1'
  #   needs: 
  #   - build
  #   - sast
  #   outputs:
  #     image_tag: ${{ steps.vars.outputs.image_tag }}
  #     image-name: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}
  #   steps:
  #     - name: Download source code
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: source-code
  #         path: .

  #     - name: Remove target folder after download
  #       run: rm -rf ./target

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_IAM_ROLE_ATHENTICATION }}
  #         role-session-name: GitHubActionSession
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Log in to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1


  #     - name: Set Image Tags
  #       id: vars
  #       run: |
  #         IMAGE_TAG=${{ github.ref_name }}-$(echo $GITHUB_SHA | head -c 8)
  #         echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
  #         echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT


  #     - name: Build and Push Docker Image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}

  #     - name: Upload ecr image scan file
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ecr-scan-file
  #         path: ecr-image-scan.sh

  # docker-image-scan:
  #   runs-on: ubuntu-latest
  #   env: 
  #     ECR_REPO: 'salary-api'
  #     AWS_REGION: 'ap-south-1'
  #   needs: docker-build-push
  #   steps:
  #     - name: Download ecr image scan file
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ecr-scan-file
  #         path: .

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_IAM_ROLE_ATHENTICATION }}
  #         role-session-name: GitHubActionSession
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Install JQ
  #       run: sudo apt-get update && sudo apt-get install -y jq

  #     - name: Run ECR Vulnerability Scan Check
  #       run: |
  #         chmod +x ./ecr-image-scan.sh && ./ecr-image-scan.sh ${{ env.ECR_REPO }} ${{ needs.docker-build-push.outputs.image_tag }} ${{ env.AWS_REGION }}

  # trigger-CD:
  #   runs-on: ubuntu-latest
  #   needs: [docker-image-scan]
  #   if: success()
  #   steps:
  #   - name: Checkout GitOps repository
  #     uses: actions/checkout@v4
  #     with:
  #       repository: NavabShariff/gitops-source
  #       token: ${{ secrets.GH_TOKEN }}

  #   - name: Determine Deployment Environment Path
  #     run: |
  #       BRANCH_NAME="${GITHUB_REF#refs/heads/}"
  #       APP_NAME="${{ github.event.repository.name }}"

  #       if [[ "$BRANCH_NAME" == release-* ]]; then
  #         echo "ENV_FOLDER=$APP_NAME/overlays/staging" >> $GITHUB_ENV
  #       elif [[ "$BRANCH_NAME" == main || "$BRANCH_NAME" == master ]]; then
  #         echo "ENV_FOLDER=$APP_NAME/overlays/prod" >> $GITHUB_ENV
  #       else
  #         echo "ENV_FOLDER=$APP_NAME/overlays/dev" >> $GITHUB_ENV
  #       fi

  #   - name: Update Image Tag in kustomization.yaml
  #     run: |
  #       IMAGE_TAG=${{ github.ref_name }}-$(echo $GITHUB_SHA | head -c 8)

  #       if [[ -f "$ENV_FOLDER/kustomization.yaml" ]]; then
  #         sed -i "s|\(newTag: \).*|\1$IMAGE_TAG|" "$ENV_FOLDER/kustomization.yaml"
  #         echo "Updated $ENV_FOLDER/kustomization.yaml with image tag: $IMAGE_TAG"
  #       else
  #         echo "ERROR: Cannot find $ENV_FOLDER/kustomization.yaml" >&2
  #         exit 1
  #       fi

  #   - name: Commit and Push updated kustomization.yaml
  #     run: |
  #       git config --global user.name "${{ github.actor }}"
  #       git config --global user.email "${{ github.actor }}@users.noreply.github.com"
  #       git add .
  #       git commit -m "Deploy: Update image tag to $IMAGE_TAG for ${{ github.event.repository.name }} on branch ${GITHUB_REF##*/}"
  #       git push


  # notify:
  #   uses: NavabShariff/shared-library/.github/workflows/send-slack-alert.yml@main
  #   needs: [build, sast, docker-build-push, docker-image-scan, trigger-CD]  # Just update here if new jobs added
  #   if: always()
  #   with:
  #     status: ${{ contains(join(needs.*.result, ' '), 'failure') && 'failure' || 'success' }}
  #     commit_author_name: ${{ github.event.pusher.name }}
  #     commit_message: ${{ github.event.head_commit.message }}
  #     commit_id: ${{ github.sha }}
  #     run_id: ${{ github.run_id }}
  #   secrets:
  #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}




  # notify-on-success:
  #   uses: NavabShariff/shared-library/.github/workflows/send-slack-alert.yml@main
  #   needs: [build, sast, docker-build-push, docker-image-scan]
  #   if: success()
  #   with:
  #     status: success
  #     commit_author_name: ${{ github.event.pusher.name }}
  #     commit_message: ${{ github.event.head_commit.message }}
  #     commit_id: ${{ github.sha }}
  #     run_id: ${{ github.run_id }}
  #   secrets:
  #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # notify-on-failure:
  #   uses: NavabShariff/shared-library/.github/workflows/send-slack-alert.yml@main
  #   needs: [build, sast, docker-build-push, docker-image-scan, trigger-CD]
  #   if: failure()
  #   with:
  #     status: failure
  #     commit_author_name: ${{ github.event.pusher.name }}
  #     commit_message: ${{ github.event.head_commit.message }}
  #     commit_id: ${{ github.sha }}
  #     run_id: ${{ github.run_id }}
  #   secrets:
  #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # cleanup:
    # runs-on: ubuntu-latest
    # needs: [docker-image-scan, notify]
    # if: always()
    # steps:

    #   - name: Install JQ
    #     run: sudo apt-get update && sudo apt-get install -y jq

    #   - name: Clean up uploaded artifacts
    #     run: |
    #       echo "Cleaning up uploaded artifacts..."
    #       # Get the list of all artifacts in the current repository
    #       artifacts=$(curl -s \
    #         -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
    #         "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")
          
    #       # Extract artifact IDs and delete them
    #       artifact_ids=$(echo $artifacts | jq '.artifacts[] | select(.expired == false) | .id')
    #       for id in $artifact_ids; do
    #         echo "Deleting artifact with ID: $id"
    #         curl -X DELETE \
    #           -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
    #           "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id"
    #       done