name: salary-api-build-pipeline

on: 
  push: 
    branches: ['main']


# # on:
# #   push:
# #     branches:
# #       - dev
# #       - 'feature/*'
# #       - 'release/*'
# #       - main
# #   pull_request:
# #     branches:
# #       - main


permissions:
  id-token: write
  contents: read  
  packages: write

jobs:

  clone:
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v4

    - name: Upload Source Code
      uses: actions/upload-artifact@v4
      with:
        name: source-code
        path: .

  # build:
  #   needs: clone
  #   runs-on: ubuntu-latest
  #   container:
  #     image: maven:3.9-eclipse-temurin-17
  #     options: --user root
  #   steps:
 
  #   - name: Download artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: source-code
  #       path: .

  #   - name: Build the Source Code
  #     run: |
  #       mvn clean package -DskipTests

  #   - name: Upload Compile files target folder
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: compile-files
  #       path: target


  # bug-analysis:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   container:
  #     image: maven:3.9-eclipse-temurin-17
  #     options: --user root
  #   steps:
  #   - name: Download artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: source-code
  #       path: .

  #   - name: Download artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: compile-files
  #       path: target

  #   - name: check files
  #     run: |
  #       ls -l

  #   - name: Bug Analysis
  #     run: mvn com.github.spotbugs:spotbugs-maven-plugin:check
  

  #   - name: Upload Bug report
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: bug-report
  #       path: target/*.xml

  # dependency-check:
  #   needs: clone
  #   runs-on: ubuntu-latest
  #   container:
  #     image: maven:3.9-eclipse-temurin-17
  #     options: --user root
  #   steps:
  #   - name: Download artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: source-code
  #       path: .
    
  #   - name: Check dependency check
  #     run: |
  #       mvn dependency-check:check

  #   - name: check file
  #     run: |
  #       ls -l

  #   - name: Upload Bug report
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: dependency-check-report
  #       path: dependency-check-report.html

  # sca-sonar-alanysis:
  #   name: static code analysis
  #   needs: [build, bug-analysis, dependency-check]
  #   runs-on: ubuntu-latest
  #   container:
  #     image: maven:3.9-eclipse-temurin-17
  #     options: --user root
  #   steps:
  #   - name: Download artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: source-code
  #       path: .


  #   - name: Download artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: compile-files
  #       path: target

  #   - name: Download artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: bug-report
  #       path: target


  #   - name: Download artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: dependency-check-report
  #       path: .

  #   - name: run sonar plugin
  #     run: |
  #      mvn sonar:sonar \
  #       -Dsonar.projectName=${{ github.event.repository.name }} \
  #       -Dsonar.projectKey=${{ github.event.repository.name }} \
  #       -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
  #       -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
  #       -Dsonar.coverage.jacoco.xmlReportPaths=jacoco.xml \
  #       -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html  \
  #       -Dsonar.findbugs.reportpaths=target/spotbugsXml.xml \
  #       -Dsonar.qualitygate.wait=true



  docker-build-push:
    runs-on: ubuntu-latest
    env: 
      ECR_REPO: 'salary-api'
      AWS_REGION: 'ap-south-1'
    # needs: sca-sonar-alanysis
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
      image-name: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}
    steps:
      - name: Download source code
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: .

      # - name: Remove target folder after download
      #   run: rm -rf ./target

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ATHENTICATION }}
          role-session-name: GitHubActionSession
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Set Image Tags
        id: vars
        run: |
          IMAGE_TAG=${{ github.ref_name }}-$(echo $GITHUB_SHA | head -c 8)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT


      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}

      - name: Upload ecr image scan file
        uses: actions/upload-artifact@v4
        with:
          name: ecr-scan-file
          path: ecr-image-scan.sh

  docker-image-scan:
    runs-on: ubuntu-latest
    env: 
      ECR_REPO: 'salary-api'
      AWS_REGION: 'ap-south-1'
    needs: docker-build-push
    steps:
      - name: Download ecr image scan file
        uses: actions/download-artifact@v4
        with:
          name: ecr-scan-file
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ATHENTICATION }}
          role-session-name: GitHubActionSession
          aws-region: ${{ env.AWS_REGION }}

      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run ECR Vulnerability Scan Check
        run: |
          chmod +x ./ecr-image-scan.sh && ./ecr-image-scan.sh ${{ env.ECR_REPO }} ${{ needs.docker-build-push.outputs.image_tag }} ${{ env.AWS_REGION }}


  dast:
    needs: [docker-image-scan, docker-build-push]
    runs-on: ubuntu-latest
    env:
     env:
      IMAGE_NAME: ${{ needs.docker-build-push.outputs.image-name }}:${{ needs.docker-build-push.outputs.image_tag }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          path: .


      - name: Start application
        run: |
          echo "IMAGE_NAME=${{ needs.docker-build-push.outputs.image-name }}:${{ needs.docker-build-push.outputs.image_tag }}" > .env
          docker compose up -d


      - name: Run ZAP scan
        run: |
          sleep 30
          set +e  # disable "exit on error" for this block
          docker run --network host -u root -v $(pwd):/zap/wrk ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t http://localhost:8080 -J report.json -z "-config urls.file=/zap/wrk/urls.txt"
          
          exit_code=$?
          echo "ZAP exited with code: $exit_code"

          if [[ $exit_code -eq 2 ]]; then
            echo "ZAP found warnings but no failures â€” treating as success."
            exit 0
          fi

          exit $exit_code  # Let GitHub Action fail only for real errors (1 or 3)

      - name: Validate ZAP Report for High Risk Issues
        run: |
          if grep -q 'High' report.json; then
            echo "High risk issues found in report!"
            exit 1  # Fail the job if 'High' found
          else
            echo "No High risk issues found in report."
          fi


      # - name: Upload ZAP Report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: zap-report
      #     path: report.html


#   # trigger-CD:
#   #   runs-on: ubuntu-latest
#   #   needs: [docker-image-scan]
#   #   if: success()
#   #   steps:
#   #   - name: Checkout GitOps repository
#   #     uses: actions/checkout@v4
#   #     with:
#   #       repository: NavabShariff/gitops-source
#   #       token: ${{ secrets.GH_TOKEN }}

#   #   - name: Determine Deployment Environment Path
#   #     run: |
#   #       BRANCH_NAME="${GITHUB_REF#refs/heads/}"
#   #       APP_NAME="${{ github.event.repository.name }}"

#   #       if [[ "$BRANCH_NAME" == release-* ]]; then
#   #         echo "ENV_FOLDER=$APP_NAME/overlays/staging" >> $GITHUB_ENV
#   #       elif [[ "$BRANCH_NAME" == main || "$BRANCH_NAME" == master ]]; then
#   #         echo "ENV_FOLDER=$APP_NAME/overlays/prod" >> $GITHUB_ENV
#   #       else
#   #         echo "ENV_FOLDER=$APP_NAME/overlays/dev" >> $GITHUB_ENV
#   #       fi

#   #   - name: Update Image Tag in kustomization.yaml
#   #     run: |
#   #       IMAGE_TAG=${{ github.ref_name }}-$(echo $GITHUB_SHA | head -c 8)

#   #       if [[ -f "$ENV_FOLDER/kustomization.yaml" ]]; then
#   #         sed -i "s|\(newTag: \).*|\1$IMAGE_TAG|" "$ENV_FOLDER/kustomization.yaml"
#   #         echo "Updated $ENV_FOLDER/kustomization.yaml with image tag: $IMAGE_TAG"
#   #       else
#   #         echo "ERROR: Cannot find $ENV_FOLDER/kustomization.yaml" >&2
#   #         exit 1
#   #       fi

#   #   - name: Commit and Push updated kustomization.yaml
#   #     run: |
#   #       git config --global user.name "${{ github.actor }}"
#   #       git config --global user.email "${{ github.actor }}@users.noreply.github.com"
#   #       git add .
#   #       git commit -m "Deploy: Update image tag to $IMAGE_TAG for ${{ github.event.repository.name }} on branch ${GITHUB_REF##*/}"
#   #       git push


#   # notify:
#   #   uses: NavabShariff/shared-library/.github/workflows/send-slack-alert.yml@main
#   #   needs: [build, sast, docker-build-push, docker-image-scan, trigger-CD]  # Just update here if new jobs added
#   #   if: always()
#   #   with:
#   #     status: ${{ contains(join(needs.*.result, ' '), 'failure') && 'failure' || 'success' }}
#   #     commit_author_name: ${{ github.event.pusher.name }}
#   #     commit_message: ${{ github.event.head_commit.message }}
#   #     commit_id: ${{ github.sha }}
#   #     run_id: ${{ github.run_id }}
#   #   secrets:
#   #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}




#   # notify-on-success:
#   #   uses: NavabShariff/shared-library/.github/workflows/send-slack-alert.yml@main
#   #   needs: [build, sast, docker-build-push, docker-image-scan]
#   #   if: success()
#   #   with:
#   #     status: success
#   #     commit_author_name: ${{ github.event.pusher.name }}
#   #     commit_message: ${{ github.event.head_commit.message }}
#   #     commit_id: ${{ github.sha }}
#   #     run_id: ${{ github.run_id }}
#   #   secrets:
#   #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

#   # notify-on-failure:
#   #   uses: NavabShariff/shared-library/.github/workflows/send-slack-alert.yml@main
#   #   needs: [build, sast, docker-build-push, docker-image-scan, trigger-CD]
#   #   if: failure()
#   #   with:
#   #     status: failure
#   #     commit_author_name: ${{ github.event.pusher.name }}
#   #     commit_message: ${{ github.event.head_commit.message }}
#   #     commit_id: ${{ github.sha }}
#   #     run_id: ${{ github.run_id }}
#   #   secrets:
#   #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

#   # cleanup:
#     # runs-on: ubuntu-latest
#     # needs: [docker-image-scan, notify]
#     # if: always()
#     # steps:

#     #   - name: Install JQ
#     #     run: sudo apt-get update && sudo apt-get install -y jq

#     #   - name: Clean up uploaded artifacts
#     #     run: |
#     #       echo "Cleaning up uploaded artifacts..."
#     #       # Get the list of all artifacts in the current repository
#     #       artifacts=$(curl -s \
#     #         -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#     #         "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")
          
#     #       # Extract artifact IDs and delete them
#     #       artifact_ids=$(echo $artifacts | jq '.artifacts[] | select(.expired == false) | .id')
#     #       for id in $artifact_ids; do
#     #         echo "Deleting artifact with ID: $id"
#     #         curl -X DELETE \
#     #           -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
#     #           "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$id"
#     #       done